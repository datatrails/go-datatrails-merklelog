// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// WriteAppendOpener is an autogenerated mock type for the WriteAppendOpener type
type WriteAppendOpener struct {
	mock.Mock
}

// Open provides a mock function with given fields: _a0
func (_m *WriteAppendOpener) Open(_a0 string) (io.WriteCloser, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 io.WriteCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (io.WriteCloser, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) io.WriteCloser); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.WriteCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWriteAppendOpener creates a new instance of WriteAppendOpener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWriteAppendOpener(t interface {
	mock.TestingT
	Cleanup(func())
}) *WriteAppendOpener {
	mock := &WriteAppendOpener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
