// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	massifs "github.com/datatrails/go-datatrails-merklelog/massifs"
	mock "github.com/stretchr/testify/mock"
)

// ReplicaReader is an autogenerated mock type for the ReplicaReader type
type ReplicaReader struct {
	mock.Mock
}

// EnsureReplicaDirs provides a mock function with given fields: tenantIdentity
func (_m *ReplicaReader) EnsureReplicaDirs(tenantIdentity string) error {
	ret := _m.Called(tenantIdentity)

	if len(ret) == 0 {
		panic("no return value specified for EnsureReplicaDirs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(tenantIdentity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetHeadVerifiedContext provides a mock function with given fields: ctx, tenantIdentity, opts
func (_m *ReplicaReader) GetHeadVerifiedContext(ctx context.Context, tenantIdentity string, opts ...massifs.ReaderOption) (*massifs.VerifiedContext, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenantIdentity)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetHeadVerifiedContext")
	}

	var r0 *massifs.VerifiedContext
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...massifs.ReaderOption) (*massifs.VerifiedContext, error)); ok {
		return rf(ctx, tenantIdentity, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...massifs.ReaderOption) *massifs.VerifiedContext); ok {
		r0 = rf(ctx, tenantIdentity, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*massifs.VerifiedContext)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...massifs.ReaderOption) error); ok {
		r1 = rf(ctx, tenantIdentity, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMassifLocalPath provides a mock function with given fields: tenantIdentity, massifIndex
func (_m *ReplicaReader) GetMassifLocalPath(tenantIdentity string, massifIndex uint32) string {
	ret := _m.Called(tenantIdentity, massifIndex)

	if len(ret) == 0 {
		panic("no return value specified for GetMassifLocalPath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, uint32) string); ok {
		r0 = rf(tenantIdentity, massifIndex)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetReplicaDir provides a mock function with given fields:
func (_m *ReplicaReader) GetReplicaDir() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetReplicaDir")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetSealLocalPath provides a mock function with given fields: tenantIdentity, massifIndex
func (_m *ReplicaReader) GetSealLocalPath(tenantIdentity string, massifIndex uint32) string {
	ret := _m.Called(tenantIdentity, massifIndex)

	if len(ret) == 0 {
		panic("no return value specified for GetSealLocalPath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, uint32) string); ok {
		r0 = rf(tenantIdentity, massifIndex)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetVerifiedContext provides a mock function with given fields: ctx, tenantIdentity, massifIndex, opts
func (_m *ReplicaReader) GetVerifiedContext(ctx context.Context, tenantIdentity string, massifIndex uint64, opts ...massifs.ReaderOption) (*massifs.VerifiedContext, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenantIdentity, massifIndex)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVerifiedContext")
	}

	var r0 *massifs.VerifiedContext
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, ...massifs.ReaderOption) (*massifs.VerifiedContext, error)); ok {
		return rf(ctx, tenantIdentity, massifIndex, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, ...massifs.ReaderOption) *massifs.VerifiedContext); ok {
		r0 = rf(ctx, tenantIdentity, massifIndex, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*massifs.VerifiedContext)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uint64, ...massifs.ReaderOption) error); ok {
		r1 = rf(ctx, tenantIdentity, massifIndex, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InReplicaMode provides a mock function with given fields:
func (_m *ReplicaReader) InReplicaMode() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for InReplicaMode")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ReplaceVerifiedContext provides a mock function with given fields: vc, writeOpener
func (_m *ReplicaReader) ReplaceVerifiedContext(vc *massifs.VerifiedContext, writeOpener massifs.WriteAppendOpener) error {
	ret := _m.Called(vc, writeOpener)

	if len(ret) == 0 {
		panic("no return value specified for ReplaceVerifiedContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*massifs.VerifiedContext, massifs.WriteAppendOpener) error); ok {
		r0 = rf(vc, writeOpener)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResolveMassifDir provides a mock function with given fields: tenantIdentityOrLocalPath
func (_m *ReplicaReader) ResolveMassifDir(tenantIdentityOrLocalPath string) (string, error) {
	ret := _m.Called(tenantIdentityOrLocalPath)

	if len(ret) == 0 {
		panic("no return value specified for ResolveMassifDir")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(tenantIdentityOrLocalPath)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(tenantIdentityOrLocalPath)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tenantIdentityOrLocalPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResolveSealDir provides a mock function with given fields: tenantIdentityOrLocalPath
func (_m *ReplicaReader) ResolveSealDir(tenantIdentityOrLocalPath string) (string, error) {
	ret := _m.Called(tenantIdentityOrLocalPath)

	if len(ret) == 0 {
		panic("no return value specified for ResolveSealDir")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(tenantIdentityOrLocalPath)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(tenantIdentityOrLocalPath)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tenantIdentityOrLocalPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReplicaReader creates a new instance of ReplicaReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReplicaReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReplicaReader {
	mock := &ReplicaReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
