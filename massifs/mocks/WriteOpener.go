// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// WriteOpener is an autogenerated mock type for the WriteOpener type
type WriteOpener struct {
	mock.Mock
}

// Execute provides a mock function with given fields: name
func (_m *WriteOpener) Execute(name string) (io.WriteCloser, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 io.WriteCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (io.WriteCloser, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) io.WriteCloser); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.WriteCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWriteOpener creates a new instance of WriteOpener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWriteOpener(t interface {
	mock.TestingT
	Cleanup(func())
}) *WriteOpener {
	mock := &WriteOpener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
