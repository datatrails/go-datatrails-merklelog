// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	crypto "crypto"

	cose "github.com/veraison/go-cose"

	mock "github.com/stretchr/testify/mock"
)

// PublicKeyProvider is an autogenerated mock type for the publicKeyProvider type
type PublicKeyProvider struct {
	mock.Mock
}

// PublicKey provides a mock function with no fields
func (_m *PublicKeyProvider) PublicKey() (crypto.PublicKey, cose.Algorithm, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PublicKey")
	}

	var r0 crypto.PublicKey
	var r1 cose.Algorithm
	var r2 error
	if rf, ok := ret.Get(0).(func() (crypto.PublicKey, cose.Algorithm, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() crypto.PublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.PublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func() cose.Algorithm); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(cose.Algorithm)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewPublicKeyProvider creates a new instance of PublicKeyProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPublicKeyProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *PublicKeyProvider {
	mock := &PublicKeyProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
