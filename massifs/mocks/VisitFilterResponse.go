// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	azblob "github.com/Azure/azure-sdk-for-go/sdk/storage/azblob"

	massifs "github.com/datatrails/go-datatrails-merklelog/massifs"

	mock "github.com/stretchr/testify/mock"
)

// VisitFilterResponse is an autogenerated mock type for the VisitFilterResponse type
type VisitFilterResponse struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, store, it
func (_m *VisitFilterResponse) Execute(ctx context.Context, store massifs.LogBlobReader, it *azblob.FilterBlobItem) (bool, error) {
	ret := _m.Called(ctx, store, it)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, massifs.LogBlobReader, *azblob.FilterBlobItem) (bool, error)); ok {
		return rf(ctx, store, it)
	}
	if rf, ok := ret.Get(0).(func(context.Context, massifs.LogBlobReader, *azblob.FilterBlobItem) bool); ok {
		r0 = rf(ctx, store, it)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, massifs.LogBlobReader, *azblob.FilterBlobItem) error); ok {
		r1 = rf(ctx, store, it)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewVisitFilterResponse creates a new instance of VisitFilterResponse. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVisitFilterResponse(t interface {
	mock.TestingT
	Cleanup(func())
}) *VisitFilterResponse {
	mock := &VisitFilterResponse{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
